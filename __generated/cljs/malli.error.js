var window=global;var $CLJS=require("./cljs_env.js");require("./cljs.core.js");require("./clojure.string.js");require("./malli.core.js");require("./malli.util.js");
'use strict';var ws,Cs,Rca;
ws=function(a){a=$CLJS.O(a);var b=$CLJS.J.g(a,$CLJS.zn),c=$CLJS.J.g(a,$CLJS.Li);return function(d){d=$CLJS.O(d);var e=$CLJS.J.g(d,$CLJS.Uk);d=$CLJS.J.g(d,$CLJS.nj);e=$CLJS.Dp.h(e);var f=$CLJS.O(e);e=$CLJS.J.g(f,$CLJS.ln);f=$CLJS.J.g(f,$CLJS.Hj);return $CLJS.Wa(b.h?b.h(d):b.call(null,d))?c:$CLJS.n($CLJS.n(e)?$CLJS.E.g(e,f):e)?["should be ",$CLJS.p.h(e)].join(""):$CLJS.n($CLJS.n(e)?f:e)?["should be between ",$CLJS.p.h(e)," and ",$CLJS.p.h(f)].join(""):$CLJS.n(e)?["should be at least ",$CLJS.p.h(e)].join(""):
$CLJS.n(f)?["should be at most ",$CLJS.p.h(f)].join(""):null}};$CLJS.xs=new $CLJS.M("malli.error","unknown","malli.error/unknown",594142330);$CLJS.ys=new $CLJS.M("malli.error","error","malli.error/error",-522553785);$CLJS.zs=new $CLJS.M(null,"en","en",88457073);$CLJS.As=new $CLJS.M("error","path","error/path",-419192760);$CLJS.Nca=new $CLJS.M(null,"unknown","unknown",-935977881);$CLJS.Oca=new $CLJS.M(null,"wrap","wrap",851669987);$CLJS.Bs=new $CLJS.M(null,"default-locale","default-locale",-677515761);
Cs=new $CLJS.M("malli.error","likely-misspelling-of","malli.error/likely-misspelling-of",1504085033);$CLJS.Ds=new $CLJS.M("error","fn","error/fn",-1263293860);$CLJS.Pca=new $CLJS.M("malli","error","malli/error",-1152359159);$CLJS.Qca=new $CLJS.M(null,"resolve","resolve",-1584445482);Rca=new $CLJS.M(null,"_value","_value",1295875052);$CLJS.Es=new $CLJS.M(null,"locale","locale",-2115712697);$CLJS.Sca=$CLJS.Kg([$CLJS.Mr,$CLJS.rq,$CLJS.cr,$CLJS.pr,$CLJS.fq,$CLJS.Zp,$CLJS.Iq,$CLJS.qr,$CLJS.dq,$CLJS.gq,$CLJS.Wp,$CLJS.Jq,$CLJS.Lp,$CLJS.pq,$CLJS.rr,$CLJS.Cq,$CLJS.Rp,$CLJS.xq,$CLJS.jq,$CLJS.kq,$CLJS.Gp,$CLJS.Di,$CLJS.qq,$CLJS.vq,$CLJS.gr,$CLJS.Vp,$CLJS.sr,$CLJS.nq,$CLJS.Np,$CLJS.Bj,$CLJS.aq,$CLJS.Eq,$CLJS.lq,new $CLJS.M("malli.error","misspelled-value","malli.error/misspelled-value",-1135752848),$CLJS.Xp,$CLJS.tq,$CLJS.sn,$CLJS.Yp,$CLJS.Jr,$CLJS.bq,$CLJS.uq,$CLJS.Kp,$CLJS.Dr,$CLJS.Or,$CLJS.sq,
$CLJS.Qi,$CLJS.ki,$CLJS.$p,$CLJS.Up,$CLJS.Wk,$CLJS.cq,$CLJS.Vk,$CLJS.mq,$CLJS.Op,$CLJS.oq,$CLJS.Ip,$CLJS.Pp,$CLJS.Tp,$CLJS.yq,$CLJS.wq,$CLJS.ur,$CLJS.xs,$CLJS.Jp,$CLJS.Gr,$CLJS.Sp,$CLJS.hq,$CLJS.Nj,$CLJS.vr,$CLJS.Gq,$CLJS.Qp,new $CLJS.M("malli.error","misspelled-key","malli.error/misspelled-key",616486174),$CLJS.Xk,$CLJS.Mp,$CLJS.wr,$CLJS.iq],[new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"disallowed key"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be true"],
null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);a=$CLJS.J.g(a,$CLJS.Uk);return["should be ",$CLJS.p.h($CLJS.E.g(1,$CLJS.D($CLJS.Ep.h(a)))?$CLJS.z($CLJS.Ep.h(a)):["either ",$CLJS.gs(", ",$CLJS.ds($CLJS.Ep.h(a)))," or ",$CLJS.p.h($CLJS.jd($CLJS.Ep.h(a)))].join(""))].join("")}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a qualified symbol"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a uri"],
null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a simple keyword"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);var b=$CLJS.J.g(a,$CLJS.Uk);return"number"===typeof $CLJS.J.g(a,$CLJS.nj)?["should be at most ",$CLJS.p.h($CLJS.z($CLJS.Ep.h(b)))].join(""):"should be a number"}],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,ws(new $CLJS.h(null,2,[$CLJS.zn,$CLJS.vl,$CLJS.Li,"should be a double"],
null))],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a uuid"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an inst"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a simple ident"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);a=$CLJS.J.g(a,$CLJS.Uk);return["should not be ",$CLJS.p.h($CLJS.z($CLJS.Ep.h(a)))].join("")}],null)],null),new $CLJS.h(null,
1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an int"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be nil"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,ws(new $CLJS.h(null,2,[$CLJS.zn,$CLJS.ql,$CLJS.Li,"should be an integer"],null))],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);var b=$CLJS.J.g(a,$CLJS.Uk);return"number"===typeof $CLJS.J.g(a,$CLJS.nj)?["should be larger than ",$CLJS.p.h($CLJS.z($CLJS.Ep.h(b)))].join(""):
"should be a number"}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a float"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an ifn"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a map"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a vector"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be any"],null)],null),new $CLJS.h(null,
1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a symbol"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be false"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an associative"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should match regex"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an ident"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,
"should be a qualified keyword"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a char"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a negative int"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);var b=$CLJS.J.g(a,$CLJS.Uk);a=$CLJS.J.g(a,$CLJS.nj);b=$CLJS.Dp.h(b);var c=$CLJS.O(b);b=$CLJS.J.g(c,$CLJS.ln);c=$CLJS.J.g(c,$CLJS.Hj);return"string"!==typeof a?"should be a string":$CLJS.n($CLJS.n(b)?
$CLJS.E.g(b,c):b)?["should be ",$CLJS.p.h(b)," characters"].join(""):$CLJS.n($CLJS.n(b)?c:b)?["should be between ",$CLJS.p.h(b)," and ",$CLJS.p.h(c)," characters"].join(""):$CLJS.n(b)?["should be at least ",$CLJS.p.h(b)," characters"].join(""):$CLJS.n(c)?["should be at most ",$CLJS.p.h(c)," characters"].join(""):null}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a symbol"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);
var b=$CLJS.J.g(a,$CLJS.Uk);return"number"===typeof $CLJS.J.g(a,$CLJS.nj)?["should be at least ",$CLJS.p.h($CLJS.z($CLJS.Ep.h(b)))].join(""):"should be a number"}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a list"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);a=$CLJS.J.g(a,Cs);return["did you mean ",$CLJS.gs(" or ",$CLJS.kf.g($CLJS.jd,a))].join("")}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,
1,[$CLJS.zs,"should be a qualified ident"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a coll"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"invalid function"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a keyword"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);var b=$CLJS.J.g(a,$CLJS.Uk);$CLJS.J.g(a,Rca);a=$CLJS.Dp.h(b);b=$CLJS.O(a);a=$CLJS.J.g(b,
$CLJS.ln);b=$CLJS.J.g(b,$CLJS.Hj);return $CLJS.n($CLJS.n(a)?$CLJS.E.g(a,b):a)?["should have ",$CLJS.p.h(a)," elements"].join(""):$CLJS.n($CLJS.n(a)?b:a)?["should have between ",$CLJS.p.h(a)," and ",$CLJS.p.h(b)," elements"].join(""):$CLJS.n(a)?["should have at least ",$CLJS.p.h(a)," elements"].join(""):$CLJS.n(b)?["should have at most ",$CLJS.p.h(b)," elements"].join(""):null}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a simple symbol"],null)],null),new $CLJS.h(null,
1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be empty"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an integer"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"missing required key"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){var b=$CLJS.O(a);a=$CLJS.J.g(b,$CLJS.Uk);b=$CLJS.J.g(b,$CLJS.nj);a=$CLJS.D($CLJS.Ep.h(a));return["invalid tuple size ",$CLJS.p.h($CLJS.D(b)),", expected ",$CLJS.p.h(a)].join("")}],
null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be zero"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a keyword"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be nil"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a qualified keyword"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a string"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,
new $CLJS.h(null,1,[$CLJS.zs,"end of input"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a qualified symbol"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"input remaining"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a seq"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a non-negative int"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,
"should be a set"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be some"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be positive"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a boolean"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an fn"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a sequential"],null)],null),new $CLJS.h(null,
1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a uuid"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"unknown error"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a number"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"invalid dispatch value"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a double"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,
"should be a seqable"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);a=$CLJS.J.g(a,$CLJS.Uk);return["should be ",$CLJS.p.h($CLJS.z($CLJS.Ep.h(a)))].join("")}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a boolean"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);var b=$CLJS.J.g(a,$CLJS.Uk);return"number"===typeof $CLJS.J.g(a,$CLJS.nj)?["should be smaller than ",$CLJS.p.h($CLJS.z($CLJS.Ep.h(b)))].join(""):
"should be a number"}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be negative"],null)],null),new $CLJS.h(null,1,[$CLJS.Ds,new $CLJS.h(null,1,[$CLJS.zs,function(a){a=$CLJS.O(a);a=$CLJS.J.g(a,Cs);return["should be spelled ",$CLJS.gs(" or ",$CLJS.kf.g($CLJS.jd,a))].join("")}],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"invalid type"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be a positive int"],null)],
null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be any"],null)],null),new $CLJS.h(null,1,[$CLJS.ss,new $CLJS.h(null,1,[$CLJS.zs,"should be an indexed"],null)],null)]);