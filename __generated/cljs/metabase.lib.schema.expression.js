var window=global;var $CLJS=require("./cljs_env.js");require("./cljs.core.js");require("./metabase.lib.dispatch.js");require("./metabase.lib.hierarchy.js");require("./metabase.lib.schema.common.js");require("./metabase.shared.util.i18n.js");require("./metabase.types.js");require("./metabase.util.malli.js");require("./metabase.util.malli.registry.js");
'use strict';var MD,RD,vga,wga,xga,yga,zga,Aga;
$CLJS.KD=function(){function a(){return Math.floor(16*Math.random()).toString(16)}var b=(8|3&Math.floor(16*Math.random())).toString(16);return new $CLJS.bz([$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),"-",$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),"-4",$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),"-",$CLJS.p.h(b),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),"-",$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),
$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a()),$CLJS.p.h(a())].join("").toLowerCase())};$CLJS.LD=function(a){for(var b=[],c=arguments.length,d=0;;)if(d<c)b.push(arguments[d]),d+=1;else break;return $CLJS.iD(arguments[0],1<b.length?new $CLJS.w(b.slice(1),0,null):null)};MD=function(a){return $CLJS.Ad(a)&&$CLJS.z(a)instanceof $CLJS.M};
$CLJS.OD=function(a){var b=function(){var c=MD(a);return c?(c=$CLJS.yd($CLJS.id(a)))?(c=$CLJS.Ci.h($CLJS.id(a)),$CLJS.n(c)?c:$CLJS.nA.h($CLJS.id(a))):c:c}();return $CLJS.n(b)?b:$CLJS.ND.h(a)};
RD=function(a,b){return new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.mr,new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.fr,new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.Mi,new $CLJS.h(null,2,[$CLJS.ss,"valid MBQL clause",$CLJS.Ds,function(c){c=$CLJS.O(c);c=$CLJS.J.g(c,$CLJS.nj);return["invalid MBQL clause: ",$CLJS.Oh.l($CLJS.H([c]))].join("")}],null),$CLJS.Ve(MD)],null),new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.W,$CLJS.PD],null)],null),new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.Mi,new $CLJS.h(null,1,[$CLJS.ss,b],null),function(c){c=$CLJS.OD(c);
return QD(c,a)}],null)],null)};$CLJS.SD=new $CLJS.M(null,"right-join","right-join",-56349359);vga=new $CLJS.M("metabase.lib.schema.expression","datetime","metabase.lib.schema.expression/datetime",-51960022);wga=new $CLJS.M("metabase.lib.schema.expression","base-type","metabase.lib.schema.expression/base-type",578343967);xga=new $CLJS.M("metabase.lib.schema.expression","non-integer-real","metabase.lib.schema.expression/non-integer-real",-1855491016);$CLJS.TD=new $CLJS.M(null,"fields","fields",-1932066230);
$CLJS.UD=new $CLJS.M(null,"expr","expr",745722291);$CLJS.VD=new $CLJS.M("metabase.lib.schema.expression","expressions","metabase.lib.schema.expression/expressions",790922225);$CLJS.WD=new $CLJS.M("metabase.lib.schema.expression","temporal","metabase.lib.schema.expression/temporal",320116754);$CLJS.XD=new $CLJS.M(null,"alias","alias",-2039751630);$CLJS.YD=new $CLJS.M("metabase.lib.schema.expression","boolean","metabase.lib.schema.expression/boolean",-1396506592);
$CLJS.ZD=new $CLJS.M("metabase.lib.schema.expression","expression","metabase.lib.schema.expression/expression",-1389098704);$CLJS.$D=new $CLJS.M("metabase.lib.schema.expression","type.unknown","metabase.lib.schema.expression/type.unknown",-98159107);$CLJS.aE=new $CLJS.M("mbql.clause","field","mbql.clause/field",1497292735);yga=new $CLJS.M("metabase.lib.schema.expression","date","metabase.lib.schema.expression/date",1943847782);$CLJS.bE=new $CLJS.M(null,"left-join","left-join",-672831855);
$CLJS.cE=new $CLJS.M("metabase.lib.schema.expression","equality-comparable","metabase.lib.schema.expression/equality-comparable",-658449046);$CLJS.dE=new $CLJS.M("lib.type-of","type-is-type-of-first-arg","lib.type-of/type-is-type-of-first-arg",-317600808);$CLJS.eE=new $CLJS.M("metabase.lib.schema.expression","orderable","metabase.lib.schema.expression/orderable",-1555566130);zga=new $CLJS.r("metabase.lib.schema.expression","type-of","metabase.lib.schema.expression/type-of",-1625245814,null);
Aga=new $CLJS.M("metabase.lib.schema.expression","time","metabase.lib.schema.expression/time",865466446);$CLJS.fE=new $CLJS.M(null,"inner-join","inner-join",659431740);$CLJS.gE=new $CLJS.M("metabase.lib.schema.expression","emptyable","metabase.lib.schema.expression/emptyable",941775581);$CLJS.PD=new $CLJS.M("metabase.lib.schema.mbql-clause","clause","metabase.lib.schema.mbql-clause/clause",955279388);
$CLJS.hE=new $CLJS.M("metabase.lib.schema.expression","string","metabase.lib.schema.expression/string",1750008170);$CLJS.iE=new $CLJS.M(null,"full-join","full-join",1305476385);$CLJS.jE=new $CLJS.M("metabase.lib.schema.expression","number","metabase.lib.schema.expression/number",779948930);$CLJS.kE=new $CLJS.M("metabase.lib.schema.expression","integer","metabase.lib.schema.expression/integer",2060430870);$CLJS.ND=function(){var a=$CLJS.Ze($CLJS.N),b=$CLJS.Ze($CLJS.N),c=$CLJS.Ze($CLJS.N),d=$CLJS.Ze($CLJS.N),e=$CLJS.J.j(new $CLJS.h(null,1,[$CLJS.Jk,$CLJS.bB],null),$CLJS.Jk,$CLJS.Xh.o?$CLJS.Xh.o():$CLJS.Xh.call(null));return new $CLJS.fi($CLJS.Hh.g("metabase.lib.schema.expression","type-of-method"),function(f){var k=$CLJS.SA(f);return $CLJS.E.g(k,$CLJS.mA)?$CLJS.bb(f):k},e,a,b,c,d)}();
$CLJS.Y(wga,new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.fr,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.Nj,$CLJS.$D],null),$CLJS.CD],null));$CLJS.ND.m(null,$CLJS.ei,function(a){throw $CLJS.ji($CLJS.iD("{0}: Don''t know how to determine the type of {1}",$CLJS.H([zga,$CLJS.Oh.l($CLJS.H([a]))])),new $CLJS.h(null,1,[$CLJS.UD,a],null));});$CLJS.ND.m(null,$CLJS.dE,function(a){$CLJS.I(a,0,null);$CLJS.I(a,1,null);a=$CLJS.I(a,2,null);return $CLJS.OD(a)});
var QD=function QD(a,b){return $CLJS.wd(a)?$CLJS.Ue(function(d){return QD.g?QD.g(d,b):QD.call(null,d,b)},a):$CLJS.wd(b)?$CLJS.Ue(function(d){return QD.g?QD.g(a,d):QD.call(null,a,d)},b):$CLJS.E.g(a,$CLJS.$D)?!0:$CLJS.nB(a,b)};$CLJS.Y($CLJS.YD,RD($CLJS.sj,"expression returning a boolean"));$CLJS.Y($CLJS.hE,RD($CLJS.Dj,"expression returning a string"));$CLJS.Y($CLJS.kE,RD($CLJS.hj,"expression returning an integer"));$CLJS.Y(xga,RD($CLJS.LC,"expression returning a non-integer real number"));
$CLJS.Y($CLJS.jE,RD($CLJS.uj,"expression returning a number"));$CLJS.Y(yga,RD($CLJS.OB,"expression returning a date"));$CLJS.Y(Aga,RD($CLJS.OC,"expression returning a time"));$CLJS.Y(vga,RD($CLJS.oC,"expression returning a date time"));$CLJS.Y($CLJS.WD,RD($CLJS.zj,"expression returning a date, time, or date time"));$CLJS.lE=new $CLJS.ch(null,new $CLJS.h(null,4,[$CLJS.uj,null,$CLJS.Dj,null,$CLJS.zj,null,$CLJS.sj,null],null),null);$CLJS.Y($CLJS.eE,RD($CLJS.lE,"an expression that can be compared with :\x3e or :\x3c"));
var Bga=new $CLJS.ch(null,new $CLJS.h(null,8,[$CLJS.xB,null,$CLJS.uj,null,$CLJS.Dj,null,$CLJS.eC,null,$CLJS.zj,null,$CLJS.lj,null,$CLJS.sj,null,$CLJS.JC,null],null),null);$CLJS.Y($CLJS.gE,new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.fr,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.W,$CLJS.hE],null),RD($CLJS.eC,"expression returning a BSONID")],null));$CLJS.Y($CLJS.cE,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.er,RD(Bga,"an expression that can appear in :\x3d or :!\x3d")],null));
$CLJS.Y($CLJS.ZD,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.er,RD($CLJS.lj,"any type of expression")],null));
$CLJS.Y($CLJS.VD,new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.kj,new $CLJS.h(null,1,[$CLJS.ln,1],null),new $CLJS.Q(null,3,5,$CLJS.R,[$CLJS.mr,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.W,$CLJS.ZD],null),new $CLJS.Q(null,4,5,$CLJS.R,[$CLJS.Uq,$CLJS.wr,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.Gj,new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.rD,$CLJS.Bj],null)],null),new $CLJS.Q(null,2,5,$CLJS.R,[$CLJS.Lq,$CLJS.wr],null)],null)],null)],null));